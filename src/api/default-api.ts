// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * PokéAPI
 * The RESTful Pokémon API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { Ability } from '../models';
import { Berry } from '../models';
import { BerryFirmness } from '../models';
import { NamedAPIResourceList } from '../models';
import { Pokemon } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbilities(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/ability/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerries(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/berry/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerryFirmness(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/berry-firmness/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerryFlavors(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/berry-flavor/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacteristics(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/characteristic/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContestEffects(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/contest-effect/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContestTypes(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/contest-type/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEggGroups(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/egg-group/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterConditionValues(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/encounter-condition-value/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterConditions(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/encounter-condition/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterMethods(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/encounter-method/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvolutionChains(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/evolution-chain/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvolutionTriggers(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/evolution-trigger/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenders(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/gender/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenerations(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/generation/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGrowthRates(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/growth-rate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemAttributes(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/item-attribute/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemCategories(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/item-category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemFlingEffects(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/item-fling-effect/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemPockets(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/item-pocket/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/item/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguages(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/language/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationAreas(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/location-area/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/location/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMachines(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/machine/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveBattleStyles(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move-battle-style/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveDamageClass(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move-damage-class/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveLearnMethods(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move-learn-method/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveMetaAilments(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move-ailment/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveMetaCategories(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move-category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveTargets(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move-target/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoves(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/move/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNatures(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/nature/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPalParkAreas(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pal-park-area/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokeathlonStats(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokeathlon-stat/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokedexs(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokedex/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonColors(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokemon-color/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handles Pokemon Encounters as a sub-resource.
         * @param {string} pokemonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonEncounters(pokemonId: string, options: any = {}): RequestArgs {
            // verify required parameter 'pokemonId' is not null or undefined
            if (pokemonId === null || pokemonId === undefined) {
                throw new RequiredError('pokemonId','Required parameter pokemonId was null or undefined when calling listPokemonEncounters.');
            }
            const localVarPath = `/pokemon/{pokemon_id}/encounters`
                .replace(`{${"pokemon_id"}}`, encodeURIComponent(String(pokemonId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonForms(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokemon-form/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonHabitats(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokemon-habitat/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonShapes(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokemon-shape/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonSpecies(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokemon-species/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemons(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/pokemon/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegions(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/region/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStats(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/stat/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuperContestEffects(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/super-contest-effect/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/type/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVersionGroups(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/version-group/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVersions(offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/version/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this ability.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAbility(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveAbility.');
            }
            const localVarPath = `/ability/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerry(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveBerry.');
            }
            const localVarPath = `/berry/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry firmness.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerryFirmness(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveBerryFirmness.');
            }
            const localVarPath = `/berry-firmness/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry flavor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerryFlavor(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveBerryFlavor.');
            }
            const localVarPath = `/berry-flavor/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this characteristic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCharacteristic(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveCharacteristic.');
            }
            const localVarPath = `/characteristic/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this contest effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContestEffect(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveContestEffect.');
            }
            const localVarPath = `/contest-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this contest type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContestType(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveContestType.');
            }
            const localVarPath = `/contest-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this egg group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEggGroup(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEggGroup.');
            }
            const localVarPath = `/egg-group/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter condition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterCondition(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEncounterCondition.');
            }
            const localVarPath = `/encounter-condition/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter condition value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterConditionValue(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEncounterConditionValue.');
            }
            const localVarPath = `/encounter-condition-value/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterMethod(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEncounterMethod.');
            }
            const localVarPath = `/encounter-method/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this evolution chain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEvolutionChain(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEvolutionChain.');
            }
            const localVarPath = `/evolution-chain/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this evolution trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEvolutionTrigger(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEvolutionTrigger.');
            }
            const localVarPath = `/evolution-trigger/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this gender.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGender(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveGender.');
            }
            const localVarPath = `/gender/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this generation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGeneration(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveGeneration.');
            }
            const localVarPath = `/generation/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this growth rate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGrowthRate(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveGrowthRate.');
            }
            const localVarPath = `/growth-rate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveItem.');
            }
            const localVarPath = `/item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item attribute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemAttribute(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveItemAttribute.');
            }
            const localVarPath = `/item-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemCategory(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveItemCategory.');
            }
            const localVarPath = `/item-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item fling effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemFlingEffect(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveItemFlingEffect.');
            }
            const localVarPath = `/item-fling-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item pocket.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemPocket(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveItemPocket.');
            }
            const localVarPath = `/item-pocket/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLanguage(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveLanguage.');
            }
            const localVarPath = `/language/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocation(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveLocation.');
            }
            const localVarPath = `/location/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this location area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocationArea(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveLocationArea.');
            }
            const localVarPath = `/location-area/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this machine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMachine(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMachine.');
            }
            const localVarPath = `/machine/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMove.');
            }
            const localVarPath = `/move/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move battle style.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveBattleStyle(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMoveBattleStyle.');
            }
            const localVarPath = `/move-battle-style/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move damage class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveDamageClass(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMoveDamageClass.');
            }
            const localVarPath = `/move-damage-class/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move learn method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveLearnMethod(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMoveLearnMethod.');
            }
            const localVarPath = `/move-learn-method/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move meta ailment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveMetaAilment(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMoveMetaAilment.');
            }
            const localVarPath = `/move-ailment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move meta category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveMetaCategory(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMoveMetaCategory.');
            }
            const localVarPath = `/move-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move target.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveTarget(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveMoveTarget.');
            }
            const localVarPath = `/move-target/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this nature.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNature(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveNature.');
            }
            const localVarPath = `/nature/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pal park area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePalParkArea(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePalParkArea.');
            }
            const localVarPath = `/pal-park-area/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokeathlon stat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokeathlonStat(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokeathlonStat.');
            }
            const localVarPath = `/pokeathlon-stat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokedex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokedex(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokedex.');
            }
            const localVarPath = `/pokedex/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemon(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokemon.');
            }
            const localVarPath = `/pokemon/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon color.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonColor(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokemonColor.');
            }
            const localVarPath = `/pokemon-color/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon form.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonForm(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokemonForm.');
            }
            const localVarPath = `/pokemon-form/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon habitat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonHabitat(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokemonHabitat.');
            }
            const localVarPath = `/pokemon-habitat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon shape.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonShape(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokemonShape.');
            }
            const localVarPath = `/pokemon-shape/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon species.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonSpecies(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrievePokemonSpecies.');
            }
            const localVarPath = `/pokemon-species/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRegion(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveRegion.');
            }
            const localVarPath = `/region/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this stat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveStat(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveStat.');
            }
            const localVarPath = `/stat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this super contest effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSuperContestEffect(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveSuperContestEffect.');
            }
            const localVarPath = `/super-contest-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveType(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveType.');
            }
            const localVarPath = `/type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVersion(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveVersion.');
            }
            const localVarPath = `/version/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this version group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVersionGroup(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveVersionGroup.');
            }
            const localVarPath = `/version-group/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbilities(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listAbilities(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerries(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listBerries(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerryFirmness(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listBerryFirmness(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerryFlavors(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listBerryFlavors(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacteristics(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listCharacteristics(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContestEffects(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContestEffects(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContestTypes(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContestTypes(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEggGroups(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEggGroups(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterConditionValues(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEncounterConditionValues(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterConditions(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEncounterConditions(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterMethods(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEncounterMethods(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvolutionChains(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEvolutionChains(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvolutionTriggers(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEvolutionTriggers(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenders(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listGenders(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenerations(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listGenerations(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGrowthRates(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listGrowthRates(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemAttributes(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listItemAttributes(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemCategories(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listItemCategories(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemFlingEffects(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listItemFlingEffects(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemPockets(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listItemPockets(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listItems(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguages(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listLanguages(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationAreas(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listLocationAreas(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listLocations(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMachines(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMachines(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveBattleStyles(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoveBattleStyles(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveDamageClass(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoveDamageClass(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveLearnMethods(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoveLearnMethods(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveMetaAilments(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoveMetaAilments(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveMetaCategories(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoveMetaCategories(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveTargets(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoveTargets(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoves(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listMoves(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNatures(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNatures(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPalParkAreas(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPalParkAreas(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokeathlonStats(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokeathlonStats(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokedexs(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokedexs(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonColors(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemonColors(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Handles Pokemon Encounters as a sub-resource.
         * @param {string} pokemonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonEncounters(pokemonId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemonEncounters(pokemonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonForms(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemonForms(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonHabitats(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemonHabitats(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonShapes(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemonShapes(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonSpecies(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemonSpecies(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemons(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listPokemons(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegions(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listRegions(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStats(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listStats(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuperContestEffects(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSuperContestEffects(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTypes(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVersionGroups(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVersionGroups(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVersions(offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedAPIResourceList> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVersions(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this ability.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAbility(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ability> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveAbility(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerry(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Berry> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveBerry(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry firmness.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerryFirmness(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BerryFirmness> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveBerryFirmness(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry flavor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerryFlavor(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveBerryFlavor(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this characteristic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCharacteristic(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveCharacteristic(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this contest effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContestEffect(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveContestEffect(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this contest type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContestType(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveContestType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this egg group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEggGroup(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveEggGroup(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter condition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterCondition(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveEncounterCondition(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter condition value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterConditionValue(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveEncounterConditionValue(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterMethod(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveEncounterMethod(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this evolution chain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEvolutionChain(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveEvolutionChain(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this evolution trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEvolutionTrigger(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveEvolutionTrigger(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this gender.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGender(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveGender(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this generation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGeneration(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveGeneration(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this growth rate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGrowthRate(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveGrowthRate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item attribute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemAttribute(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveItemAttribute(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemCategory(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveItemCategory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item fling effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemFlingEffect(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveItemFlingEffect(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item pocket.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemPocket(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveItemPocket(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLanguage(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveLanguage(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocation(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveLocation(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this location area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocationArea(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveLocationArea(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this machine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMachine(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMachine(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move battle style.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveBattleStyle(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMoveBattleStyle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move damage class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveDamageClass(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMoveDamageClass(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move learn method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveLearnMethod(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMoveLearnMethod(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move meta ailment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveMetaAilment(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMoveMetaAilment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move meta category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveMetaCategory(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMoveMetaCategory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move target.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveTarget(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveMoveTarget(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this nature.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNature(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveNature(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pal park area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePalParkArea(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePalParkArea(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokeathlon stat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokeathlonStat(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokeathlonStat(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokedex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokedex(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokedex(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemon(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pokemon> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokemon(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon color.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonColor(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokemonColor(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon form.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonForm(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokemonForm(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon habitat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonHabitat(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokemonHabitat(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon shape.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonShape(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokemonShape(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon species.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonSpecies(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrievePokemonSpecies(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRegion(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveRegion(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this stat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveStat(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveStat(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this super contest effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSuperContestEffect(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveSuperContestEffect(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveType(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVersion(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveVersion(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this version group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVersionGroup(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).retrieveVersionGroup(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbilities(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listAbilities(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerries(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listBerries(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerryFirmness(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listBerryFirmness(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBerryFlavors(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listBerryFlavors(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacteristics(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listCharacteristics(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContestEffects(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listContestEffects(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContestTypes(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listContestTypes(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEggGroups(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listEggGroups(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterConditionValues(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listEncounterConditionValues(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterConditions(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listEncounterConditions(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEncounterMethods(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listEncounterMethods(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvolutionChains(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listEvolutionChains(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvolutionTriggers(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listEvolutionTriggers(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenders(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listGenders(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenerations(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listGenerations(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGrowthRates(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listGrowthRates(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemAttributes(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listItemAttributes(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemCategories(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listItemCategories(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemFlingEffects(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listItemFlingEffects(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemPockets(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listItemPockets(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listItems(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguages(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listLanguages(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationAreas(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listLocationAreas(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listLocations(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMachines(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMachines(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveBattleStyles(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoveBattleStyles(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveDamageClass(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoveDamageClass(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveLearnMethods(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoveLearnMethods(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveMetaAilments(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoveMetaAilments(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveMetaCategories(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoveMetaCategories(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoveTargets(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoveTargets(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoves(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listMoves(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNatures(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listNatures(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPalParkAreas(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPalParkAreas(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokeathlonStats(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokeathlonStats(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokedexs(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokedexs(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonColors(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokemonColors(offset, limit, options)(axios, basePath);
        },
        /**
         * Handles Pokemon Encounters as a sub-resource.
         * @param {string} pokemonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonEncounters(pokemonId: string, options?: any) {
            return DefaultApiFp(configuration).listPokemonEncounters(pokemonId, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonForms(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokemonForms(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonHabitats(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokemonHabitats(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonShapes(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokemonShapes(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemonSpecies(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokemonSpecies(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPokemons(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listPokemons(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegions(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listRegions(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStats(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listStats(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuperContestEffects(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listSuperContestEffects(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listTypes(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVersionGroups(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listVersionGroups(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVersions(offset?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).listVersions(offset, limit, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this ability.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAbility(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveAbility(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerry(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveBerry(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry firmness.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerryFirmness(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveBerryFirmness(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this berry flavor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBerryFlavor(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveBerryFlavor(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this characteristic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCharacteristic(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveCharacteristic(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this contest effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContestEffect(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveContestEffect(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this contest type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContestType(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveContestType(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this egg group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEggGroup(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveEggGroup(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter condition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterCondition(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveEncounterCondition(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter condition value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterConditionValue(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveEncounterConditionValue(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this encounter method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEncounterMethod(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveEncounterMethod(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this evolution chain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEvolutionChain(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveEvolutionChain(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this evolution trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEvolutionTrigger(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveEvolutionTrigger(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this gender.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGender(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveGender(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this generation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGeneration(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveGeneration(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this growth rate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGrowthRate(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveGrowthRate(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveItem(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item attribute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemAttribute(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveItemAttribute(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemCategory(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveItemCategory(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item fling effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemFlingEffect(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveItemFlingEffect(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this item pocket.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItemPocket(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveItemPocket(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLanguage(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveLanguage(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocation(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveLocation(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this location area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocationArea(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveLocationArea(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this machine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMachine(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMachine(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMove(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move battle style.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveBattleStyle(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMoveBattleStyle(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move damage class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveDamageClass(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMoveDamageClass(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move learn method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveLearnMethod(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMoveLearnMethod(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move meta ailment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveMetaAilment(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMoveMetaAilment(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move meta category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveMetaCategory(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMoveMetaCategory(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this move target.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMoveTarget(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveMoveTarget(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this nature.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNature(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveNature(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pal park area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePalParkArea(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePalParkArea(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokeathlon stat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokeathlonStat(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokeathlonStat(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokedex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokedex(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokedex(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemon(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokemon(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon color.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonColor(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokemonColor(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon form.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonForm(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokemonForm(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon habitat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonHabitat(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokemonHabitat(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon shape.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonShape(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokemonShape(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this pokemon species.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePokemonSpecies(id: string, options?: any) {
            return DefaultApiFp(configuration).retrievePokemonSpecies(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRegion(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveRegion(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this stat.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveStat(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveStat(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this super contest effect.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSuperContestEffect(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveSuperContestEffect(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveType(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveType(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVersion(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveVersion(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this version group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVersionGroup(id: string, options?: any) {
            return DefaultApiFp(configuration).retrieveVersionGroup(id, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listAbilities(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listBerries(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listBerryFirmness(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listBerryFlavors(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listCharacteristics(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listContestEffects(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listContestTypes(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEggGroups(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEncounterConditionValues(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEncounterConditions(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEncounterMethods(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEvolutionChains(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEvolutionTriggers(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listGenders(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listGenerations(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listGrowthRates(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listItemAttributes(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listItemCategories(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listItemFlingEffects(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listItemPockets(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listItems(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listLanguages(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listLocationAreas(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listLocations(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMachines(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoveBattleStyles(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoveDamageClass(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoveLearnMethods(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoveMetaAilments(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoveMetaCategories(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoveTargets(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listMoves(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listNatures(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPalParkAreas(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokeathlonStats(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokedexs(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemonColors(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * Handles Pokemon Encounters as a sub-resource.
     * @param {string} pokemonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemonEncounters(pokemonId: string, options?: any): AxiosPromise<Array<object>>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemonForms(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemonHabitats(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemonShapes(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemonSpecies(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listPokemons(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listRegions(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listStats(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listSuperContestEffects(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listTypes(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listVersionGroups(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listVersions(offset?: number, limit?: number, options?: any): AxiosPromise<NamedAPIResourceList>;

    /**
     * 
     * @param {string} id A unique integer value identifying this ability.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveAbility(id: string, options?: any): AxiosPromise<Ability>;

    /**
     * 
     * @param {string} id A unique integer value identifying this berry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveBerry(id: string, options?: any): AxiosPromise<Berry>;

    /**
     * 
     * @param {string} id A unique integer value identifying this berry firmness.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveBerryFirmness(id: string, options?: any): AxiosPromise<BerryFirmness>;

    /**
     * 
     * @param {string} id A unique integer value identifying this berry flavor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveBerryFlavor(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this characteristic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveCharacteristic(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this contest effect.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveContestEffect(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this contest type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveContestType(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this egg group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveEggGroup(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this encounter condition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveEncounterCondition(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this encounter condition value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveEncounterConditionValue(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this encounter method.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveEncounterMethod(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this evolution chain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveEvolutionChain(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this evolution trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveEvolutionTrigger(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this gender.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveGender(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this generation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveGeneration(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this growth rate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveGrowthRate(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveItem(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this item attribute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveItemAttribute(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this item category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveItemCategory(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this item fling effect.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveItemFlingEffect(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this item pocket.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveItemPocket(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveLanguage(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveLocation(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this location area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveLocationArea(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this machine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMachine(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMove(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move battle style.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMoveBattleStyle(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move damage class.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMoveDamageClass(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move learn method.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMoveLearnMethod(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move meta ailment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMoveMetaAilment(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move meta category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMoveMetaCategory(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this move target.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveMoveTarget(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this nature.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveNature(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pal park area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePalParkArea(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokeathlon stat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokeathlonStat(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokedex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokedex(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokemon(id: string, options?: any): AxiosPromise<Pokemon>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon color.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokemonColor(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon form.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokemonForm(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon habitat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokemonHabitat(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon shape.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokemonShape(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon species.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrievePokemonSpecies(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this region.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveRegion(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this stat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveStat(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this super contest effect.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveSuperContestEffect(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveType(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveVersion(id: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id A unique integer value identifying this version group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retrieveVersionGroup(id: string, options?: any): AxiosPromise<object>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAbilities(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listAbilities(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listBerries(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listBerries(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listBerryFirmness(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listBerryFirmness(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listBerryFlavors(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listBerryFlavors(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCharacteristics(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listCharacteristics(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContestEffects(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listContestEffects(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContestTypes(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listContestTypes(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEggGroups(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEggGroups(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEncounterConditionValues(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEncounterConditionValues(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEncounterConditions(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEncounterConditions(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEncounterMethods(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEncounterMethods(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEvolutionChains(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEvolutionChains(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEvolutionTriggers(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEvolutionTriggers(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listGenders(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listGenders(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listGenerations(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listGenerations(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listGrowthRates(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listGrowthRates(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listItemAttributes(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listItemAttributes(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listItemCategories(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listItemCategories(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listItemFlingEffects(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listItemFlingEffects(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listItemPockets(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listItemPockets(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listItems(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listItems(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listLanguages(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listLanguages(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listLocationAreas(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listLocationAreas(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listLocations(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listLocations(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMachines(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMachines(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoveBattleStyles(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoveBattleStyles(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoveDamageClass(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoveDamageClass(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoveLearnMethods(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoveLearnMethods(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoveMetaAilments(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoveMetaAilments(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoveMetaCategories(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoveMetaCategories(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoveTargets(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoveTargets(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMoves(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMoves(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNatures(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listNatures(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPalParkAreas(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPalParkAreas(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokeathlonStats(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokeathlonStats(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokedexs(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokedexs(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemonColors(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokemonColors(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Handles Pokemon Encounters as a sub-resource.
     * @param {string} pokemonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemonEncounters(pokemonId: string, options?: any) {
        return DefaultApiFp(this.configuration).listPokemonEncounters(pokemonId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemonForms(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokemonForms(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemonHabitats(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokemonHabitats(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemonShapes(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokemonShapes(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemonSpecies(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokemonSpecies(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPokemons(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listPokemons(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listRegions(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listRegions(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listStats(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listStats(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSuperContestEffects(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSuperContestEffects(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTypes(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listTypes(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVersionGroups(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listVersionGroups(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVersions(offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).listVersions(offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this ability.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAbility(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveAbility(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this berry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveBerry(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveBerry(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this berry firmness.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveBerryFirmness(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveBerryFirmness(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this berry flavor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveBerryFlavor(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveBerryFlavor(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this characteristic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveCharacteristic(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveCharacteristic(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this contest effect.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveContestEffect(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveContestEffect(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this contest type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveContestType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveContestType(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this egg group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveEggGroup(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveEggGroup(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this encounter condition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveEncounterCondition(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveEncounterCondition(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this encounter condition value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveEncounterConditionValue(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveEncounterConditionValue(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this encounter method.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveEncounterMethod(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveEncounterMethod(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this evolution chain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveEvolutionChain(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveEvolutionChain(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this evolution trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveEvolutionTrigger(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveEvolutionTrigger(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this gender.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveGender(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveGender(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this generation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveGeneration(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveGeneration(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this growth rate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveGrowthRate(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveGrowthRate(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveItem(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveItem(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this item attribute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveItemAttribute(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveItemAttribute(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this item category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveItemCategory(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveItemCategory(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this item fling effect.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveItemFlingEffect(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveItemFlingEffect(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this item pocket.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveItemPocket(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveItemPocket(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveLanguage(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveLanguage(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveLocation(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveLocation(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this location area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveLocationArea(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveLocationArea(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this machine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMachine(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMachine(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMove(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move battle style.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMoveBattleStyle(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMoveBattleStyle(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move damage class.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMoveDamageClass(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMoveDamageClass(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move learn method.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMoveLearnMethod(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMoveLearnMethod(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move meta ailment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMoveMetaAilment(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMoveMetaAilment(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move meta category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMoveMetaCategory(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMoveMetaCategory(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this move target.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveMoveTarget(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveMoveTarget(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this nature.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveNature(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveNature(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pal park area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePalParkArea(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePalParkArea(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokeathlon stat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokeathlonStat(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokeathlonStat(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokedex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokedex(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokedex(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokemon(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokemon(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon color.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokemonColor(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokemonColor(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon form.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokemonForm(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokemonForm(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon habitat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokemonHabitat(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokemonHabitat(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon shape.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokemonShape(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokemonShape(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this pokemon species.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePokemonSpecies(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePokemonSpecies(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this region.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveRegion(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveRegion(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this stat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveStat(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveStat(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this super contest effect.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveSuperContestEffect(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveSuperContestEffect(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveType(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveVersion(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveVersion(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this version group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveVersionGroup(id: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveVersionGroup(id, options)(this.axios, this.basePath);
    }

}
